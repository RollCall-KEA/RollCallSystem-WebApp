@page "/Startrollcall"
@inject NavigationManager NavigationManager
@using RollCallSystem.Shared
@using RollCallSystem.Client.ViewModels
@using RollCallSystem.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage

<div class="ms_content_wrapper padder_top90">
    <div class="row">
    <div class="col">
     <div class="container">
  <section class="mx-auto my-5" style="max-width: 23rem;">
      
    <div class="card testimonial-card mt-2 mb-3">
      <div class="card-up aqua-gradient"></div>
      <div class="avatar mx-auto white">
        <img src="images/personicon.jpg" class="rounded-circle img-fluid"
          alt="woman avatar">
      </div>
      <div class="card-body text-center">
          @if (user == null)
{

    <p><em>Loading...</em></p>

}
else
{<h4 class="card-title font-weight-bold">Hello, @user.FirstName.</h4>
}
        <hr>
        @if (quote != null)
       {
         <p><i class="fas fa-quote-left"></i>@quote.text -@quote.author</p>  
       }
        <h5>@theTime</h5>
      </div>
    </div>
  </section>
</div>

    </div>
    <div class="col">
    <div class="container">
    <section class="mx-auto my-5" style="max-width: 23rem;">
    @if (lesson != null)
    {
        if(lesson.startTime < DateTime.Now)
        {
           
            <h1>Current lesson</h1>
            
        }
        else
        {
           
           <h1>Upcoming lesson</h1>
           <p></p>
        }
        <p>@lesson.subjectName, @lesson.campusName</p>
        <p>@lesson.startTime - @lesson.startTime.AddMinutes(45)</p>
        <p></p>
        <button disabled=@isRollCallWaiting hidden=@isRollCall type="button" class="btn btn-secondary btn-lg" @onclick="StartRollCall">Start Roll Call</button>
        @if(lesson.code != null)
        {
            <h2 class="h4">Roll call has started!</h2>
            <h1>@lesson.code</h1>
            <h2 class="h4">Students checked in</h2>
            @if(lesson.checkedInStudents.Count() > 0)
            {
                foreach(User student in lesson.checkedInStudents)
                {
                    <p>@student.FirstName @student.LastName, @student.Email</p>
                }
            }            
        }        
    } 

 </section>
</div>

</div>
    </div>
    </div>
   

@*@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Hello, @user.FirstName.</h1>

    @if (lesson != null)
    {
        if(lesson.startTime < DateTime.Now)
        {
            <h1>Current lesson:</h1>
        }
        else
        {
           <h1>Upcoming lesson:</h1> 
        }
        <h2>@lesson.subjectName, @lesson.campusName</h2>
        <h2>@lesson.startTime - @lesson.startTime.AddMinutes(45)</h2>
        <button disabled=@isRollCallWaiting hidden=@isRollCall type="button" class="btn btn-secondary btn-lg" @onclick="StartRollCall">Start Roll Call</button>
        @if(lesson.code != null)
        {
            <h2>Roll call has started!</h2>
            <h1>@lesson.code</h1>
            <h3>Students checked in:</h3>
            @if(lesson.checkedInStudents.Count() > 0)
            {
                foreach(User student in lesson.checkedInStudents)
                {
                    <h4>@student.FirstName @student.LastName, @student.Email</h4>
                }
            }            
        }        
    }    
}
<h1>@theTime</h1>
</div>*@
@code {
    private User? user;
    private Lesson? lesson;
    private bool isRollCallWaiting;
    private bool isRollCall;
    private Quote? quote;

    private LoginViewModel loginViewModel = new LoginViewModel();

    //GetCurrentUser
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    //After button click
    private void NavigateToCounterComponent() 
    { NavigationManager.NavigateTo("counter");
    } 

    //Timer
    string theTime;    
    Timer aTimer;

    protected override void OnInitialized()
    {
        aTimer = new Timer(Tick, null, 0, 1000);        
    }

    protected override async Task OnInitializedAsync()
    {
        LoginService.OnLoginSuccessful += (x) => DisplayGreeting(x);
        LessonService.OnCurrentLessonUpdated += (x) => DisplayCurrentLesson(x);
        QuoteService.OnQuotesUpdated +=(x) => DisplayQuote(x);

        try
        {
            string email = "james6789@kea.dk";
            string password = "pass5678";
            loginViewModel.LogIn(email, password);
            Storage.SetItem("Email", email);
            Storage.SetItem("Password", password);

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private void Tick(object _)
    {
        theTime = DateTime.Now.ToLongTimeString();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        aTimer?.Dispose();
    }

    private void DisplayGreeting(User user)
    {
        this.user = user;
        InvokeAsync(StateHasChanged);
        loginViewModel.GetCurrentLesson(user);
    }

    private void DisplayCurrentLesson(Lesson lesson)
    {
        this.lesson = lesson;
        if(lesson.code != null)
        {
            isRollCall = true;
        }
        InvokeAsync(StateHasChanged);
    }

    private void StartRollCall()
    {
        isRollCallWaiting = true;
        InvokeAsync(StateHasChanged);
        loginViewModel.StartRollCall(lesson, user);
    }

    private void DisplayQuote()
    {
       this. 
    }

}
